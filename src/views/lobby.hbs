<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src='/socket.io/socket.io.js'></script>
  <title>Lobby</title>
  <!-- Bootstrap CSS CDN -->
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="bg-light">
  <style>
    .custom-navbar {
      background-color: #2e2e2e;
      padding: 1.5rem;
    }

    .navbar-brand {
      font-size: 3rem;
      color: white;
    }

    .btn-primary {
      font-size: 1rem;
    }
  </style>

  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg custom-navbar">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">Alias</a>
      <div class="ms-auto">
        <button id="profileBtn" class="btn btn-light me-2" data-toggle="modal" data-target="#profileModal">Profile</button>
        <button id="logoutBtn" class="btn btn-light">Log out</button>
      </div>
    </div>
  </nav>

  <!-- Profile Modal -->
  <div class="modal fade" id="profileModal" tabindex="-1" role="dialog" aria-labelledby="profileModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="profileModalLabel">Profile</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <p>This is the profile modal content.</p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Error Modal -->
  <div class="modal fade" id="errorModal" tabindex="-1" role="dialog" aria-labelledby="errorModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="errorModalLabel">Error</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body" id="errorModalBody" style="color: red;">
          <!-- Error message will be rendered here -->
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

  <div id="error-message" style="display: none; color: red;"></div>
  <div class="container">
    <h1>Game Lobby</h1>
    <button id="createGameBtn" class="btn btn-primary">Create new room</button>
    <div id="available-games">
      <h2>Available games</h2>
      <ul id="game-list">
        <!-- The list of games will be rendered here -->
      </ul>
    </div>
  </div>

  <!-- Bootstrap and JavaScript dependencies -->
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>

  <script>
    let socket;

    window.onload = function() {
      const { userId, userName } = getUserInfo();
      const accessToken = localStorage.getItem('accessToken');

      if (!socket) {
        socket = io('/lobby', {
          auth: { token: accessToken }
        });
      }

      document.getElementById('logoutBtn').addEventListener('click', (e) => {
        e.preventDefault();
        localStorage.clear();
        window.location.href = '/login';
      });

      document.getElementById('createGameBtn').addEventListener('click', (e) => {
        e.preventDefault();
        socket.emit('game:create', {
          gameName: `${userName}'s Game`,
        });
      });

      document.getElementById('profileBtn').addEventListener('click', (e) => {
        e.preventDefault();
        const profileModal = new bootstrap.Modal(document.getElementById('profileModal'));
        profileModal.show();
      });

      socket.on('connect_error', (error) => {
        console.error('Connection error:', error);
        renderError(error.message);
      });

      socket.on('connect', () => {
        console.log(`Connected as ${userName} (ID: ${userId})`);

        socket.on('games:updated', (games) => {
          console.log('Games updated:', games);
          renderLobby(games);
        });

        socket.on('game:joined', (gameId) => {
          console.log('Joined game:', gameId);
          redirectToGame(gameId);
        });

        socket.on('game:created', (gameId) => {
          console.log('Created game:', gameId);
          redirectToGame(gameId);
        });

        socket.on('exception', (error) => {
          console.error('Server exception:', error.message);
          renderErrorMessage(error.message);
        });
      });
    };

    function getUserInfo() {
      const userId = localStorage.getItem('userId');
      const userName = localStorage.getItem('userName');
      return { userId, userName };
    }

    function renderError(message) {
      const errorDiv = document.getElementById('error-message');
      const container = document.getElementsByClassName('container')[0];
      container.style.display = 'none';
      errorDiv.innerHTML = `Error: ${message}`;
      errorDiv.style.display = 'block';
    }

    function renderErrorMessage(message) {
      const errorModalBody = document.getElementById('errorModalBody');
      errorModalBody.innerHTML = `Error: ${message}`;
      $('#errorModal').modal('show');
    }

    function renderLobby(games) {
      const gameList = document.getElementById('game-list');
      gameList.innerHTML = ''; // Clear the list

      if (games.length > 0) {
        games.forEach(game => {
          const li = document.createElement('li');
          li.innerHTML = `
            <span>${game.name}, Players: ${game.players}/${game.maxPlayers}</span>
            <button 
              ${game.started ? 'disabled' : ''} 
              ${game.isFull ? 'disabled' : ''} 
              onclick="joinGame('${game.id}')">
              Join
            </button>
          `;
          gameList.appendChild(li);
        });
      } else {
        gameList.innerHTML = '<li>No rooms created</li>';
      }
    }

    function joinGame(gameId) {
      console.log('Joining game with id:', gameId);
      socket.emit('game:join', { gameId });
    }

    function redirectToGame(gameId) {
      window.location.href = `/game/${gameId}`;
    }
  </script>
</body>
</html>
